<?php

function sendmail($email, $subject, $message, $type = "text") {
	
	/*
		bool sendmail(mixed email, string subject, text message [, string type]);
		Proccesses and sends a new email using mail() function.
		Type: Valid values are "text" or "text/html".
	*/
	
	global $cfg;
	
	mail(
		$email, $subject, $message,
		"From: Booksift <{$cfg['admin_email']}>;\r\nContent-Type: text"
	);
	
	return TRUE;
}

function substr_ext($string, $limit, $link = array()) {
	
	/* Feature Depreciated */
	
	/*
		str substr_ext(string string, int limit [, array link])
		Shortens a string and adds "..." at the end to 
		indicate there is more text; also has the option
		of adding a link at the end.
	*/
	
	/*
	if (isset($string{$limit})) {
		if (($string{$limit} != " ")) {
			while ($string{$limit} != " ") {
				$limit++;
			}
		}
	}
	
	if (strlen($string) > $limit) {
		$string = substr(stripslashes($string), 0, $limit);
		
		if (strlen($string) == $limit) {
			$string = trim($string) . '...';
			
			if (is_array($link)) {
				$string .= " <a href={$link[1]}>{$link[0]}</a>";
			}
		}
	}
	*/
	
	return ($string);
}

function go_back($ext = "", $alt = "", $ref = "") {
	
	/* -----------------------------------------------
	| Sends user back to the last page they were on,
	| including a specified "ext" which will vary for
	| each module.
	+ --------------------------------------------- */
	
	//global $ref;
	global $cfg;
	$ref = $_SERVER['HTTP_REFERER'];
	
	// Make sure we have a ref.
	if (!$ref) {
		if ($alt) {
			$ref = $alt;
		} else {
			$ref = "?";
		}
	}
	
	if ($ext) {
		// First look for a '?'
		if (!strstr($ref, "?")) {
			// Can't have anything at the end, post-fix $ext...
			$ref = "?$ext";
			
		} else {
			// The ref is normal, check for ampersands.
			$ref .= "&$ext";
		}
	}
	
	// Replace occurance of more than one & with one &.
	$search[0] = "/[&]{,2}/";
	$replace[0] = "&";
	
	// Remove instance of ?& and replace it with a ?.
	$search[1] = "/\?&/";
	$replace[1] = "?";
	
	// Remove http:// so header() dosen't mess up.
	$search[2] = "/(http:\/\/|http:)/";
	$replace[2] = "";
	
	// Remove the hostname (we don't need this)!
	$search[3] = "/[a-z0-9\.-:]+\//i";
	$replace[3] = "";
	
	$ref = preg_replace($search, $replace, $ref);
	
	/*
		Now we're going to attempt to remove
		multiple occurances of patterns in a string.
	*/
	if (strstr($ref, "&")) {
		$ref = explode("&", $ref);
		$ref = array_unique($ref);
		$ref = implode("&", $ref);
	}
	
	header("Location: $ref");
	exit;
}

function genpass() {
	
	// Generate a random id encrypt it.
	$pass = crypt(uniqid(rand(), 1));
	
	// To remove any slashes that might have come.
	$pass = strip_tags(stripslashes($pass));
	
	// Removing any . or / and reversing the string.
	$pass = strrev(str_replace(array(".", "/"), "", $pass));
	
	// Finally take the first 10 characters.
	return substr($pass, 0, 10);
}

function currency($int) {
	
	$int = explode('.', $int);
	
	if (isset($int[1])) {
		
		$int[1] = ($int[1] + 0);
		$int[1] = "0.$int[1]";
		$int[1] = round( $int[1] , 2);
		
		$s_int = explode('.', $int[1]);
		$int[1] = $s_int[1];
		
		if ($int[1] < 1) {
			$int[1] = '00';
		} elseif ($int[1] < 10) {
			$int[1] = $int[1] . '0';
		}
		
	} else {
		$int[1] = "00";
	}
	
	return "{$int[0]}.{$int[1]}";
}

function SearchFilterURL() {
	
	// Filter out annoying args generated by "Go" button.
	foreach ($_REQUEST as $Key => $Value) {
		
		if ($Key == 'keywords') {
			// Make the URL look more familiar.
			$Value = str_replace(" ", "+", $Value);
		}
		
		if (in_array($Key, array("keywords", "sort", "page"))) {
			$Args[] = "{$Key}={$Value}";
		}
	}
	
	if (is_array($Args)) {
		return "../site?mod=isearch&action=results&" . implode("&", $Args);
		
	} else {
		return "../site?mod=search";
	}
}

?>